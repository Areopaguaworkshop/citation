import os
import subprocess
import logging
import tempfile
from typing import Optional

def convert_to_pdf(file_path: str) -> Optional[str]:
    """
    Converts a document to a temporary PDF file using LibreOffice.
    Returns the path to the temporary PDF, or None if the conversion fails.
    """
    print(f"⚙️ Converting {os.path.basename(file_path)} to PDF...")

    temp_dir = tempfile.gettempdir()
    
    try:
        # Run LibreOffice in headless mode to perform the conversion
        cmd = [
            "soffice",
            "--headless",
            "--convert-to",
            "pdf",
            file_path,
            "--outdir",
            temp_dir,
        ]
        
        process = subprocess.run(
            cmd, capture_output=True, text=True, encoding="utf-8", errors="replace"
        )

        if process.returncode != 0:
            # Check for common error: LibreOffice not found
            if "command not found" in process.stderr.lower() or "no such file" in process.stderr.lower():
                logging.error(
                    "LibreOffice is not installed or not in the system's PATH. "
                    "Please install it to process Office documents."
                )
            else:
                logging.error(f"Failed to convert file. Error: {process.stderr}")
            return None

        # Construct the expected output path
        base_name, _ = os.path.splitext(os.path.basename(file_path))
        converted_pdf_path = os.path.join(temp_dir, f"{base_name}.pdf")

        if not os.path.exists(converted_pdf_path):
            logging.error(f"Conversion appeared to succeed, but the output file was not found at: {converted_pdf_path}")
            return None
            
        logging.info(f"Successfully converted to temporary PDF: {converted_pdf_path}")
        return converted_pdf_path

    except FileNotFoundError:
        logging.error(
            "LibreOffice is not installed or not in the system's PATH. "
            "Please install it to process Office documents."
        )
        return None
    except Exception as e:
        logging.error(f"An unexpected error occurred during file conversion: {e}")
        return None
